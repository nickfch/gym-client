import { API } from 'src/constants/settings';
import { StrapiQueryParams } from 'src/types/queryPrams';
import {
  CoucheWorkoutResponse,
  CoucheWorkoutListResponse,
  WorkoutListResponse,
  WorkoutResponse,
  Workout,
} from 'src/types/api-autogenerated';
import { mapAuthHeaders } from 'src/utils/http';
import { GetUserWorkout } from './types';

const baseHttpHeaders = {
  'Content-Type': 'application/json',
};

export const requestUserWorkouts = async () => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '3');
  const config = await mapAuthHeaders({
    method: 'GET',
    headers: baseHttpHeaders,
  });

  const response = await fetch(
    new URL(`${API}/couche-workouts?${qParams}`),
    config,
  );

  return (await response.json()) as CoucheWorkoutListResponse;
};

export const requestUserWorkoutById = async (
  workoutId: string,
): Promise<GetUserWorkout> => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '4');
  const config = await mapAuthHeaders({
    method: 'GET',
    headers: baseHttpHeaders,
  });
  const response = await fetch(
    new URL(`${API}/couche-workouts/${workoutId}?${qParams}`),
    config,
  );

  return (await response.json()) as GetUserWorkout;
};

export const postCompleteWorkout = async (
  workoutId: string,
  value: boolean,
) => {
  const config = await mapAuthHeaders({
    method: 'PUT',
    headers: baseHttpHeaders,
    body: JSON.stringify({
      data: {
        completed: value,
      },
    }),
  });

  const response = await fetch(
    new URL(`${API}/couche-workouts/${workoutId}`),
    config,
  );

  return (await response.json()) as CoucheWorkoutResponse;
};

export const getAvailableWorkouts = async <TFields extends keyof Workout>(
  ...fields: TFields[]
) => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '2');

  if (Array.isArray(fields)) {
    fields.forEach((fieldName) =>
      qParams.append(StrapiQueryParams.Fields, fieldName),
    );
  }

  const config = {
    method: 'GET',
    headers: baseHttpHeaders,
  };

  const response = await fetch(new URL(`${API}/workouts\?${qParams}`), config);

  return (await response.json()) as WorkoutListResponse;
};

export const getWorkoutById = async (workoutId: string) => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '2');

  const config = {
    method: 'GET',
    headers: baseHttpHeaders,
  };

  const response = await fetch(
    new URL(`${API}/workouts/${workoutId}\?${qParams}`),
    config,
  );

  return (await response.json()) as WorkoutResponse;
};
