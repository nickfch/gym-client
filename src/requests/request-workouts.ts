import { API } from 'src/constants/settings';
import { StrapiQueryParams } from 'src/types/queryPrams';
import {
  ApiUserWorkoutUserWorkout,
  ApiWorkoutWorkout,
} from 'src/types/contentTypes';
import { UserWorkoutResponse } from 'src/types/api-autogenerated';

export type GetUserWorkouts = {
  data: (ApiUserWorkoutUserWorkout['attributes'] & {
    workout: ApiWorkoutWorkout['attributes'];
    documentId: string;
  })[];
};

export type GetUserWorkout = {
  data: ApiUserWorkoutUserWorkout['attributes'] & {
    workout: ApiWorkoutWorkout['attributes'];
    documentId: string;
  };
};

export const requestUserWorkouts = async () => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '3');

  const response = await fetch(new URL(`${API}/user-workouts?${qParams}`));

  return (await response.json()) as UserWorkoutResponse;
};

export const requestUserWorkoutById = async (
  workoutId: string,
): Promise<GetUserWorkout> => {
  const qParams = new URLSearchParams();
  qParams.append(StrapiQueryParams.PopulateLevel, '4');

  const response = await fetch(
    new URL(`${API}/user-workouts/${workoutId}?${qParams}`),
  );

  return (await response.json()) as GetUserWorkout;
};
