import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { SafeAreaView, StatusBar } from 'react-native';
import { useGetUserWorkout } from 'src/requests/hooks/useGetUserWorkout';
import { Exercise, Workout } from 'src/types/api-autogenerated';
import { Progress } from 'src/components/Progress';
import { useCompleteWorkoutMutation } from 'src/requests/hooks/useCompleteWorkoutMutation';
import { WorkoutHeader } from './components/WorkoutHeader';
import { ExerciseList } from './components/ExerciseList';
import { WorkoutScore } from './components/WorkoutScore';
import { WorkoutActions } from './components/WorkoutActions';

import { useStyles } from './WorkoutScreen.styles';
import { WorkoutScreenProps, WorkoutScreenState } from './WorkoutScreen.types';

type UserExercise = Exercise & { completed: boolean };

export const WorkoutScreen: React.FC<WorkoutScreenProps> = ({
  route: {
    params: { workoutId },
  },
}) => {
  const styles = useStyles();
  const { mutate: completeWorkoutMutation } = useCompleteWorkoutMutation();
  const { data, refetch, isLoading } = useGetUserWorkout(workoutId);
  const workoutCompleted = useMemo(() => Boolean(data?.data.completed), [data]);

  const [selectedWorkout, setSelectedWorkout] =
    useState<WorkoutScreenState['selectedWorkout']>(null);

  // State for workout progress
  const [currentExerciseId, setCurrentExerciseId] =
    useState<WorkoutScreenState['currentExerciseId']>('');
  const [workoutInProgress, setWorkoutInProgress] =
    useState<WorkoutScreenState['workoutInProgress']>(false);
  const [workoutScore, setWorkoutScore] =
    useState<WorkoutScreenState['workoutScore']>(0);

  const [exercises, setExercises] = useState<UserExercise[]>(
    data?.data?.workout?.exercises?.map((ex) => ({
      ...(ex as unknown as Exercise),
      completed: false,
    })) || [],
  );

  const calculateWorkoutScore = useCallback(
    (completedIds: string[]) => {
      // Simple scoring algorithm - can be adjusted based on your needs
      const totalExercises = exercises.length;
      const completionPercentage = (completedIds.length / totalExercises) * 100;

      // Calculate score out of 100
      const newScore = Math.round(completionPercentage);
      setWorkoutScore(newScore);
    },
    [exercises, setWorkoutScore],
  );

  const startWorkout = () => {
    if (exercises.length === 0) {
      throw new Error('No exercises found for this workout');
    }
    setWorkoutInProgress(true);
    setCurrentExerciseId(exercises[0].documentId!);

    setExercises(
      exercises.map((ex) => ({
        ...ex,
        completed: false,
      })),
    );
  };

  const completeWorkout = useCallback(() => {
    completeWorkoutMutation(
      {
        workoutId,
      },
      {
        onSuccess(data) {
          setWorkoutInProgress(false);
          calculateWorkoutScore(
            exercises.filter((ex) => ex.completed).map((ex) => ex.documentId!),
          );
          refetch();
        },
      },
    );
    // Here you would typically send the workout results to your backend
  }, [
    completeWorkoutMutation,
    workoutId,
    setWorkoutInProgress,
    calculateWorkoutScore,
    exercises,
  ]);

  const toggleExerciseCompletion = useCallback(
    (exerciseId: string) => {
      setExercises((prevExercises) =>
        prevExercises.map((ex) =>
          ex.documentId === exerciseId
            ? { ...ex, completed: !ex.completed }
            : ex,
        ),
      );
    },
    [setExercises],
  );

  const moveToNextExercise = useCallback(() => {
    const currentIndex = exercises.findIndex(
      (ex) => ex.documentId === currentExerciseId,
    );
    if (currentIndex < exercises.length - 1) {
      setCurrentExerciseId(exercises[currentIndex + 1].documentId!);
    } else {
      // All exercises completed
      completeWorkout();
    }
  }, [exercises, currentExerciseId, setCurrentExerciseId, completeWorkout]);

  const refreshWorkout = useCallback(() => {
    completeWorkoutMutation(
      {
        workoutId,
        completed: false,
      },
      {
        onSuccess(data) {
          setWorkoutInProgress(false);
          setCurrentExerciseId('');
          refetch();
          setExercises(
            exercises.map((ex) => ({
              ...ex,
              completed: false,
            })),
          );
        },
      },
    );
  }, [
    completeWorkoutMutation,
    workoutId,
    setWorkoutInProgress,
    setCurrentExerciseId,
    setExercises,
  ]);

  useEffect(() => {
    if (data?.data?.workout?.exercises) {
      setExercises(
        data.data.workout.exercises.map<UserExercise>((ex) => ({
          ...(ex as unknown as Exercise),
          completed: false,
        })),
      );
    }
    if (data?.data?.workout) {
      setSelectedWorkout(data.data.workout as any);
    }
  }, [data]);

  if (isLoading) {
    return <Progress />;
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />

      {selectedWorkout && (
        <WorkoutHeader
          workout={selectedWorkout as unknown as Workout}
          inProgress={workoutInProgress}
          completed={workoutCompleted}
        />
      )}
      <ExerciseList
        exercises={exercises}
        currentExerciseId={currentExerciseId}
        workoutInProgress={workoutInProgress}
        toggleCompletion={toggleExerciseCompletion}
      />
      <WorkoutScore score={workoutScore} completed={workoutCompleted} />
      <WorkoutActions
        workoutInProgress={workoutInProgress}
        workoutCompleted={workoutCompleted}
        onStart={startWorkout}
        onComplete={completeWorkout}
        onNext={moveToNextExercise}
        onRefresh={refreshWorkout}
      />
    </SafeAreaView>
  );
};
